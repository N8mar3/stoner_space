{"version":3,"sources":["candy-machine.ts","connection.tsx","LightMode.tsx","ImageBlock.tsx","MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","getProgramState","fetchIdl","idl","program","account","candyMachine","fetch","state","getCurrentBlockTime","getSlot","getBlockTime","Date","getTime","all","currentBlockTime","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","timeDiff","goLiveDate","id","authority","isSoldOut","isActive","isPresale","isWhitelistOnly","treasury","wallet","tokenMint","gatekeeper","endSettings","whitelistMintSettings","hiddenSettings","price","retainAuthority","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","getCollectionPDA","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","createAccountsForMint","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","undefined","txs","userTokenAccount","transaction","mintOneToken","beforeTransactions","afterTransactions","setupState","userPayingAccountAddress","remainingAccounts","push","getNetworkToken","gatekeeperNetwork","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","toBase58","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPDA","getAccountInfo","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","error","instructionsMatrix","signersMatrix","txns","t","mintTxn","mintTxId","metadataKey","ms","DEFAULT_TIMEOUT","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","filter","signatures","find","sig","equals","fullySignedTransactions","signAllTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","then","number","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","onSignature","context","e","ColorModeContext","React","toggleColorMode","MyApp","useState","darkMode","setDarkMode","useEffect","document","body","classList","remove","Paper","style","padding","backgroundColor","borderRadius","backdropFilter","Grid","container","direction","wrap","Button","onClick","Typography","variant","align","display","color","fontFamily","fontWeight","ToggleColorMode","setMode","colorMode","prevMode","theme","createTheme","palette","Provider","ThemeProvider","StandardImageList","ImageList","sx","height","alignItems","cols","itemData","item","ImageListItem","src","img","srcSet","alt","title","loading","useStyles","makeStyles","createStyles","root","spacing","margin","width","flexDirection","alignContent","justifyContent","background","fontSize","marginBottom","MintCountdown","date","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","elevation","CTAButton","styled","MintButton","onMint","isMinting","setIsMinting","useWallet","useConnection","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","waitForActiveToken","setWaitForActiveToken","removeAccountChangeListener","previousGatewayStatus","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","ACTIVE","disabled","network","CIVIC_GATEKEEPER_NETWORK","findGatewayToken","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","CircularProgress","ConnectButton","WalletDialogButton","MintContainer","div","SolanaIcon","props","SvgIcon","viewBox","fill","xmlns","cx","cy","r","d","x1","y1","x2","y2","gradientUnits","stopColor","offset","stopOpacity","getCountdownDate","endSettingType","toDate","Home","isUserMinting","setIsUserMinting","setCandyMachine","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","cluster","useMemo","signTransaction","refreshCandyMachineState","useCallback","hideDuration","Connection","cndy","active","presale","isWLUser","userPrice","token","getTokenAccountBalance","balance","parseInt","amount","valid","gte","getBalance","limit","Math","min","collectionPDAAccount","txnEstimate","connected","setupMint","txTimeout","mintResult","metadataStatus","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setOpen","anchorRef","prevOpen","focus","handleClose","event","contains","target","Container","marginTop","position","maxWidth","StyledEngineProvider","injectFirst","paddingTop","paddingRight","paddingLeft","paddingBottom","xs","formatNumber","asNumber","clusterUrl","options","autoShowModal","val","Stack","disableElevation","startIcon","size","Popper","anchorEl","role","placement","transition","disablePortal","TransitionProps","Grow","transformOrigin","ClickAwayListener","onClickAway","ButtonGroup","orientation","href","endIcon","Snackbar","autoHideDuration","onClose","Alert","type","primary","main","secondary","process","getCandyMachineId","clusterApiUrl","App","endpoint","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","buyer"],"mappings":"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","file":"static/js/main.b2282323.chunk.js","sourcesContent":["/* eslint-disable */\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from \"@solana/web3.js\";\nimport { sendTransactions, SequenceType } from \"./connection\";\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from \"./utils\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: null | anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  const subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"processed\",\n  });\n\n  const getProgramState = async (): Promise<[anchor.Program, any]> => {\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\n    return [program, state];\n  };\n\n  const getCurrentBlockTime = async (): Promise<number> => {\n    const slot = await connection.getSlot();\n    return (await connection.getBlockTime(slot)) ?? new Date().getTime() / 1000;\n  };\n\n  const [[program, state], currentBlockTime] = await Promise.all([\n    getProgramState(),\n    getCurrentBlockTime(),\n  ]);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\n  const goLiveDate =\n    state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"collection_authority\"),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        [],\n        []\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log(\"SetupState: \", setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1\n        ),\n      ]\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true,\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true,\n    });\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress\n  );\n\n  console.log(remainingAccounts.map((rm) => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    })\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log(\"Collection PDA: \", collectionPDA.toBase58());\n        console.log(\"Authority: \", candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          })\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions\n      )\n    ).txs.map((t) => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n","/* eslint-disable */\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from \"@solana/web3.js\";\n\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][]\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  const toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          \"single\"\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          \"single\"\n        );\n        ids = ids.concat(txs.map((t) => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      \"Died on \",\n      stopPoint,\n      \"retrying from instruction\",\n      instructions[stopPoint],\n      \"instructions length is\",\n      instructions.length\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = \"singleGossip\",\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = []\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    const transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter((t) =>\n    t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    (t) => !t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    \"Signed txns length\",\n    signedTxns.length,\n    \"vs handed in length\",\n    instructionSet.length\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i)\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log(\"Failed at txn index:\", i);\n        console.log(\"Caught failure:\", e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (!Array.isArray(instructions)) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map((s) => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map((s) => s.publicKey)\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  const options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    }\n  );\n\n  console.log(\"Started awaiting confirmation for\", txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error(\"Timeout Error caught\", err);\n    if (err.timeout) {\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, \"single\")\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith(\"Program log: \")) {\n            throw new Error(\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import * as React from 'react';\n\nimport Paper from \"@material-ui/core/Paper\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\"\nimport Button from '@mui/material/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport Typography from \"@material-ui/core/Typography\";\n\nconst ColorModeContext = React.createContext({ toggleColorMode: () => {} });\n\nfunction MyApp() {\n  const [darkMode, setDarkMode] = useState(false);\n  useEffect(() => {\n    if (darkMode) {\n      document.body.classList.add(\"dark\");\n    } else {\n      document.body.classList.remove(\"dark\");\n    }\n  }, [darkMode]);\n  \n  return (\n    <Paper\n        style={{\n            padding:10,\n            backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n            borderRadius: 12,\n            backdropFilter: \"blur(5px)\"\n        }}>\n        <Grid \n            container\n            direction=\"column\"\n            wrap=\"nowrap\">\n            <Button onClick={() =>{setDarkMode(!darkMode)}}>\n                <Typography\n                    variant=\"h3\"\n                    align=\"center\"\n                    display=\"inline\"\n                    style={{ color: \"#fc02d6\", fontFamily: \"Rubik Moonrocks\", fontWeight: \"bold\" }}\n                >\n                    STONER COW\n                </Typography>\n            </Button>\n            <Typography\n                    variant=\"caption\"\n                    align=\"center\"\n                    display=\"block\"\n                    style={{color: \"#c6c6c6\" }}\n                >\n                    Tap to switch between light modes\n            </Typography>\n        </Grid>\n    </Paper>\n  );\n}\n\nexport default function ToggleColorMode() {\n  const [mode, setMode] = React.useState<'light' | 'dark'>('light');\n  const colorMode = React.useMemo(\n    () => ({\n      toggleColorMode: () => {\n        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n      },\n    }),\n    [],\n  );\n\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode,\n        },\n      }),\n    [mode],\n  );\n\n  return (\n    <ColorModeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>\n        <MyApp />\n      </ThemeProvider>\n    </ColorModeContext.Provider>\n  );\n}\n","import * as React from 'react';\nimport ImageList from '@mui/material/ImageList';\nimport ImageListItem from '@mui/material/ImageListItem';\n\nexport default function StandardImageList() {\n  return (\n    <ImageList sx={{ height: 350, alignItems: 'center', borderRadius: 3 }} cols={1}>\n      {itemData.map((item) => (\n        <ImageListItem key={item.img}>\n          <img\n            src={`${item.img}&fit=crop&auto=format`}\n            srcSet={`${item.img}?fit=crop&auto=format&dpr=2 2x`}\n            alt={item.title}\n            loading=\"lazy\"\n          />\n        </ImageListItem>\n      ))}\n    </ImageList>\n  );\n}\n\nconst itemData = [\n  {\n    img: 'https://arweave.net/FivbwTetOCXbY9DQkwwIz-kCbWSYtbU_FO5F4-fqcQc',\n    title: 'Cow_1',\n  },\n  {\n    img: 'https://arweave.net/3PkSeUgVD9kzm6Gk8-fheH5EmKyMGL5V3Pvle-HZ6U0',\n    title: 'Cow_2',\n  },\n  {\n    img: 'https://arweave.net/E3NzyvtJ3CiHtGkGAwLF0HA1R2dtUg8vCWfEkR5FTjc',\n    title: 'Cow_3',\n  },\n  {\n    img: 'https://arweave.net/1Hc4y5cndUIpi6rrym0SIoueia-zGN5loOYDVp7Iw7k',\n    title: 'Cow_4',\n  },\n  {\n    img: 'https://arweave.net/8t-EMaLYoKce0GtmKuODJBxrwYKtqqeD25Hm4fT_C3Q',\n    title: 'Cow_5',\n  },\n  {\n    img: 'https://arweave.net/CzzF60erwcAp-9OF7XuK1Qxg2zlHBuis1KoHDRa8dkg',\n    title: 'Cow_6',\n  },\n  {\n    img: 'https://arweave.net/fC8QEbIYYThizKIy_iMCX2RzuAlPty-Cej1TwQxgq3k',\n    title: 'Cow_7',\n  },\n  {\n    img: 'https://arweave.net/W3_f3gIeLg8gCjXh3-ZMWEQ-lYRAfQzVWWIGOJ0Nu5M',\n    title: 'Cow_8',\n  },\n  {\n    img: 'https://arweave.net/H_34tpRx8xtub0c_A2kzDgHbVeKfNR3NAGYzrZ9J8kQ',\n    title: 'Cow_9',\n  },\n  {\n    img: 'https://arweave.net/W_OvBzif_RUlQELPKiKhb4Wcs8eYF7R-ID5ntkF0Stc',\n    title: 'Cow_10',\n  },\n  {\n    img: 'https://arweave.net/ovfsKi4gGuOzAz_W86rnsuUN-gUXL3n-3hFRHtWhLoM',\n    title: 'Cow_11',\n  },\n  {\n    img: 'https://arweave.net/fBa1xjRUEpzEMvDny6UjC8JBsMldfb88sz1-BWLCYns',\n    title: 'Cow_12',\n  },\n];\n","import { Paper } from \"@material-ui/core\";\nimport Countdown from \"react-countdown\";\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      padding: theme.spacing(0),\n      \"& > *\": {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignContent: \"center\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        background: \"#384457\",\n        color: \"white\",\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: \"flex\",\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: \"column\",\n      alignContent: \"center\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      background: \"#384457\",\n      color: \"white\",\n      borderRadius: 5,\n      fontWeight: \"bold\",\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: \"bold\",\n      fontSize: 18,\n    },\n  })\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from \"styled-components\";\nimport Button from '@mui/material/Button';\nimport { CandyMachineAccount } from \"./candy-machine\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from \"@identity.com/solana-gateway-ts\";\nimport { CIVIC_GATEKEEPER_NETWORK } from \"./utils\";\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 5px;\n  margin-bottom: 5px;\n  background: #5e4cdf;\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n  const [waitForActiveToken, setWaitForActiveToken] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return \"SOLD OUT\";\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return \"WHITELIST MINT\";\n    }\n\n    return \"MINT\";\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find((state) => previousGatewayStatus === state) &&\n      !invalidToStates.find((state) => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log(\"change: \", GatewayStatus[gatewayStatus]);\n  }, [waitForActiveToken, previousGatewayStatus, gatewayStatus]);\n\n  useEffect(() => {\n    if (waitForActiveToken && gatewayStatus === GatewayStatus.ACTIVE) {\n      console.log(\"Minting after token active\");\n      setWaitForActiveToken(false);\n      onMint();\n    }\n  }, [waitForActiveToken, gatewayStatus, onMint]);\n\n  return (\n    <CTAButton style={{color: \"#000000\", backgroundColor: \"#fc02d6\", fontFamily: \"Nunito\", fontWeight: \"bold\", fontSize: 20}}\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === CIVIC_GATEKEEPER_NETWORK) {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              setWaitForActiveToken(true);\n              await requestGatewayToken();\n              console.log(\"after: \", gatewayStatus);\n            }\n          } else if (\n            network === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\n            network === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                \"_blank\"\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  \"confirmed\"\n                )\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport LightMode from './LightMode';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport * as React from 'react';\nimport { StyledEngineProvider } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\nimport StandardImageList from './ImageBlock';\nimport \"typeface-nunito\"\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport GavelIcon from '@mui/icons-material/Gavel';\nimport PhoneIphoneIcon from '@mui/icons-material/PhoneIphone';\nimport Popper from '@mui/material/Popper';\nimport Grow from '@mui/material/Grow';\nimport SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from \"./candy-machine\";\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"./utils\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: #5e4cdf;\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nfunction SolanaIcon(props: SvgIconProps) {\n  return (\n    <SvgIcon {...props}>\n      <svg viewBox=\"0 0 128 128\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx=\"64\" cy=\"64\" r=\"64\" fill=\"url(#paint0_linear)\"/>\n      <path d=\"M110.584 64.9142H99.142C99.142 41.7651 80.173 23 56.7724 23C33.6612 23 14.8716 41.3057 14.4118 64.0583C13.936 87.577 36.241 108 60.0186 108H63.0094C83.9723 108 112.069 91.7667 116.459 71.9874C117.27 68.3413 114.358 64.9142 110.584 64.9142ZM39.7689 65.9454C39.7689 69.0411 37.2095 71.5729 34.0802 71.5729C30.9509 71.5729 28.3916 69.0399 28.3916 65.9454V56.8414C28.3916 53.7457 30.9509 51.2139 34.0802 51.2139C37.2095 51.2139 39.7689 53.7457 39.7689 56.8414V65.9454ZM59.5224 65.9454C59.5224 69.0411 56.9631 71.5729 53.8338 71.5729C50.7045 71.5729 48.1451 69.0399 48.1451 65.9454V56.8414C48.1451 53.7457 50.7056 51.2139 53.8338 51.2139C56.9631 51.2139 59.5224 53.7457 59.5224 56.8414V65.9454Z\" fill=\"url(#paint1_linear)\"/>\n      <defs>\n      <linearGradient id=\"paint0_linear\" x1=\"64\" y1=\"0\" x2=\"64\" y2=\"128\" gradientUnits=\"userSpaceOnUse\">\n      <stop stopColor=\"#534BB1\"/>\n      <stop offset=\"1\" stopColor=\"#551BF9\"/>\n      </linearGradient>\n      <linearGradient id=\"paint1_linear\" x1=\"65.4998\" y1=\"23\" x2=\"65.4998\" y2=\"108\" gradientUnits=\"userSpaceOnUse\">\n      <stop stopColor=\"white\"/>\n      <stop offset=\"1\" stopColor=\"white\" stopOpacity=\"0.82\"/>\n      </linearGradient>\n      </defs>\n      </svg>\n    </SvgIcon>\n  );\n}\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n  error?: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const cluster = props.network;\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = \"confirmed\") => {\n      if (!anchorWallet) {\n        return;\n      }\n      if (props.error !== undefined) {\n        setAlertState({\n          open: true,\n          message: props.error,\n          severity: \"error\",\n          hideDuration: null,\n        });\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection\n          );\n          console.log(\"Candy machine state: \", cndy);\n          let active = cndy?.state.goLiveDate\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\n            : false;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint\n            );\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                \"There was a problem fetching whitelist token balance\"\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log(\"There was a problem fetching SPL token balance\");\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey)\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            const limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith(\"failed to get info about account\")\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: \"error\",\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: \"error\",\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = []\n  ) => {\n    try {\n      setIsUserMinting(true);\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: \"Please sign account setup transaction\",\n            severity: \"info\",\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                \"Setup transaction succeeded! Please sign minting transaction\",\n              severity: \"info\",\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Mint failed! Please try again!\",\n              severity: \"error\",\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Please sign minting transaction\",\n            severity: \"info\",\n          });\n        }\n\n        const mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              \"processed\"\n            );\n          console.log(\"Metadata status: \", !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          const remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState(\"processed\");\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\n            severity: \"error\",\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  const [open, setOpen] = React.useState(false);\nconst anchorRef = React.useRef<HTMLButtonElement>(null);\nconst handleToggle = () => {\n  setOpen((prevOpen) => !prevOpen);\n};\n// return focus to the button when we transitioned from !open -> open\nconst prevOpen = React.useRef(open);\nReact.useEffect(() => {\n  if (prevOpen.current === true && open === false) {\n    anchorRef.current!.focus();\n  }\n\n  prevOpen.current = open;\n}, [open]);\n\nconst handleClose = (event: Event | React.SyntheticEvent) => {\n  if (\n    anchorRef.current &&\n    anchorRef.current.contains(event.target as HTMLElement)\n  ) {\n    return;\n  }\n\n  setOpen(false);\n};\n\n  return (\n    <Container style={{ marginTop: 10, position: \"relative\" }}>\n      <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\n        <React.StrictMode>\n          <StyledEngineProvider injectFirst>\n            <LightMode />\n          </StyledEngineProvider>\n        </React.StrictMode>\n        <Paper\n          style={{\n            marginTop: 10,\n            paddingTop: 10,\n            paddingRight: 24,\n            paddingLeft: 24,\n            paddingBottom: 10,\n            backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n            borderRadius: 12,\n            backdropFilter: \"blur(5px)\"\n          }}>\n            <Typography\n              align=\"center\"\n              display=\"block\"\n              style={{color: \"#7241df\"}}>\n              <React.StrictMode>\n                <StyledEngineProvider injectFirst>\n                  <StandardImageList />\n                </StyledEngineProvider>\n              </React.StrictMode>\n            </Typography>\n            <Typography\n              variant=\"caption\"\n              align=\"center\"\n              display=\"block\"\n              style={{ marginTop: 7, color: \"#c6c6c6\" }}\n                >\n              Do you know who we are? *scrollable*\n            </Typography>\n        </Paper>\n        <Paper\n          style={{\n            marginTop: 10,\n            paddingTop: 5,\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n            borderRadius: 12,\n            backdropFilter: \"blur(5px)\"\n          }}>\n          {!wallet.connected ? (\n            <ConnectButton\n              style={{color: \"#000000\", backgroundColor: \"#fc02d6\", fontFamily: \"Nunito\", fontWeight: \"bold\", fontSize: 20}}\n            >Connect Wallet\n            </ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? \"Discount Price\"\n                        : \"Price\"}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: \"bold\" }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: \"bold\" }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? \"COMPLETED\"\n                              : isPresale\n                              ? \"PRESALE\"\n                              : \"LIVE\"\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: \"bold\", fontFamily: \"Nunito\" }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                wallet.publicKey &&\n                wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    cluster={cluster}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={(val) => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={(val) => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={\n                      isActive ||\n                      (isPresale && isWhitelistUser && isValidBalance)\n                    }\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{marginTop: 7, color: \"#c6c6c6\"}}\n          >\n            Cant wait? Get WL token from  {<GavelIcon/>} below\n          </Typography>\n        </Paper>\n        <Paper\n          style={{\n            marginTop: 10,\n            paddingTop: 8,\n            backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n            borderRadius: 12,\n            backdropFilter: \"blur(5px)\"\n          }}>\n          <Stack\n            spacing={1}\n            direction=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            >\n            <Button\n              disableElevation\n              color='secondary'\n              sx={{ fontFamily: \"Nunito\", color: '#ff029a', fontWeight: \"bold\"}}\n              ref={anchorRef}\n              id=\"composition-button\"\n              aria-controls={open ? 'composition-menu' : undefined}\n              aria-expanded={open ? 'true' : undefined}\n              aria-haspopup=\"true\"\n              onClick={handleToggle}\n              startIcon={<PhoneIphoneIcon />}\n              size=\"large\"\n            >\n              App Mint\n            </Button>\n            <Popper\n              open={open}\n              anchorEl={anchorRef.current}\n              role={undefined}\n              placement=\"top-start\"\n              transition\n              disablePortal\n            >\n              {({ TransitionProps, placement }) => (\n                <Grow\n                  {...TransitionProps}\n                  style={{\n                    transformOrigin:\n                      placement === 'bottom-start' ? 'left top' : 'left bottom',\n                  }}\n                >\n                  <Paper\n                    style={{\n                      marginBottom: 10,\n                      backgroundColor: \"rgba(30, 30, 30, 0.9)\",\n                      borderRadius: 8,\n                      maxWidth: 250\n                    }}>\n                    <ClickAwayListener onClickAway={handleClose}>\n                      <ButtonGroup\n                        variant=\"text\"\n                        size=\"large\"\n                        orientation=\"vertical\"\n                        color=\"secondary\"\n                        aria-label=\"text button group 4\"\n                        >\n                        <Button\n                          onClick={handleClose}\n                          sx={{ color:\"#9efffb\", fontFamily: \"Nunito\", fontWeight: \"bold\"}}\n                          startIcon={<SolanaIcon/>}\n                          href=\"https://phantom.app/ul/browse/https%3A%2F%2Fstonercow.club%2F?ref=https%3A%2F%2Fstonercow.club%2F\"\n                        >\n                          Phantom\n                        </Button>\n                        <Typography\n                          variant=\"body2\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{marginTop: 5, padding: 15, color: \"#c6c6c6\"}}\n                        >\n                          Missing your fav app? Just paste our link in Solana apps browser\n                        </Typography>\n                      </ButtonGroup>\n                    </ClickAwayListener>\n                  </Paper>\n                </Grow>\n              )}\n            </Popper>\n            <Button\n              sx={{color:\"#90ff0a\", fontFamily: \"Nunito\", fontWeight: \"bold\"}}\n              href=\"\"\n              endIcon={<GavelIcon/>}\n              size=\"large\"\n            >\n              auction\n            </Button>\n          </Stack>\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{color: \"#c6c6c6\" }}\n          >\n            Use App Mint button to get out SCOW via sphone\n          </Typography>\n        </Paper>\n        <Paper\n          style={{\n            marginTop: 10,\n            marginBottom: 5,\n            paddingTop: 10,\n            backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n            borderRadius: 12,\n            backdropFilter: \"blur(5px)\"\n          }}>\n          <Stack\n            direction=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            spacing={1}>\n            <ButtonGroup disableElevation variant=\"text\" size=\"large\" aria-label=\"text button group 2\">\n              <Button\n                sx={{ color:\"#11f4e9\", fontFamily: \"Nunito\", fontWeight: \"bold\"}}\n                href=\"https://discord.gg/eA4xufkbHj\">\n                Discord\n              </Button>\n              <Button\n                sx={{ color: \"#fc6220\", fontFamily: \"Nunito\", fontWeight: \"bold\"}}\n                href=\"https://twitter.com/stonercowclub?s=11\">\n                Twitter\n              </Button>\n              <Button\n                sx={{ color: \"#fff20a\", fontFamily: \"Nunito\", fontWeight: \"bold\" }}\n                href=\"https://axon-group.gitbook.io/dev-diaries/\">\n                Game Info*\n              </Button>\n            </ButtonGroup>\n          </Stack>\n          <Typography\n              variant=\"caption\"\n              align=\"center\"\n              display=\"block\"\n              style={{ marginBottom: 10, color: \"#c6c6c6\" }}\n                >\n              *Powered by Axon Games®\n            </Typography>\n        </Paper>\n      </Container>\n      \n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport Home from \"./Home\";\nimport { DEFAULT_TIMEOUT } from \"./connection\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\n\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: \"#f411ed\",\n    },\n    secondary: {\n      main: \"#71fcd2\",\n    }\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    return new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID!);\n  } catch (e) {\n    console.log(\"Failed to construct CandyMachineId\", e);\n    return undefined;\n  }\n};\n\nlet error: string | undefined = undefined;\n\nif (process.env.REACT_APP_SOLANA_NETWORK === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_NETWORK value in the .env file doesn't look right! The options are devnet and mainnet-beta!\";\n} else if (process.env.REACT_APP_SOLANA_RPC_HOST === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_RPC_HOST value in the .env file doesn't look right! Make sure you enter it in as a plain-text url (i.e., https://metaplex.devnet.rpcpool.com/)\";\n}\n\nconst candyMachineId = getCandyMachineId();\nconst network = (process.env.REACT_APP_SOLANA_NETWORK ??\n  \"devnet\") as WalletAdapterNetwork;\nconst rpcHost =\n  process.env.REACT_APP_SOLANA_RPC_HOST ?? anchor.web3.clusterApiUrl(\"devnet\");\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    []\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={DEFAULT_TIMEOUT}\n              rpcHost={rpcHost}\n              network={network}\n              error={error}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return \"--\";\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  \"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\n);\n\nexport const CIVIC_GATEKEEPER_NETWORK =\n  \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\";\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from(\"expire\")],\n    CIVIC\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from(\"gateway\"),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n"],"sourceRoot":""}